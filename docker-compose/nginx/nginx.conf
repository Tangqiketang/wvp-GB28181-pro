
user  root;
worker_processes  1;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
        accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on
        multi_accept on;  #设置一个进程是否同时接受多个网络连接，默认为off
        #use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport
        worker_connections  1024;    #最大连接数，默认为512
}


http {
     include       mime.types;   #文件扩展名与文件类型映射表
     default_type  application/octet-stream; #默认文件类型，默认为text/plain
     #access_log off; #取消服务日志
     log_format myFormat '$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for'; #自定义格式
     access_log /var/log/nginx/access.log myFormat;  #combined为日志格式的默认值
     sendfile on;   #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。
     sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。
     keepalive_timeout 65;  #连接超时时间，默认为75s，可以在http，server，location块。

    fastcgi_connect_timeout 3000;
    fastcgi_send_timeout 3000;
    fastcgi_read_timeout 3000;
    fastcgi_buffer_size 256k;
    fastcgi_buffers 8 256k;
    fastcgi_busy_buffers_size 256k;
    fastcgi_temp_file_write_size 256k;
    fastcgi_intercept_errors on;
    client_max_body_size 100m;
    client_body_buffer_size 256k;
    # 开启nginx压缩
    gzip on;
    gzip_min_length 1k;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/xml application/javascript application/x-javascript text/javascript;
    gzip_vary on;

        #限制最大连池
    limit_conn_log_level error;
    limit_conn_status 503;
    limit_conn_zone $server_name zone=perserver:20m;

    # 隐藏Nginx后端服务X-Powered-By头
    proxy_hide_header X-Powered-By;
    proxy_hide_header Server;


    #nginx优化----------------------
    #隐藏版本号
    server_tokens off;

    #优化服务器域名的散列表大小
    server_names_hash_bucket_size 64;
    server_names_hash_max_size 2048;

    #减少网络报文段数量
    tcp_nopush on;
    #提高I/O性能
    #tcp_nodelay on;

    #引入http具体配置
    include /etc/nginx/conf.d/http/*.conf;
}


#stream模块和http模块是并列级别的,ngx_stream_core_module模块由1.9.0版,提供用于tcp/UDP数据流的代理和负载均衡
stream {
    log_format basic '$remote_addr [$time_local] '
                 '$protocol $status $bytes_sent $bytes_received '
                 '$session_time';
    access_log /var/log/nginx/stream-access.log basic buffer=32k;
    # 引入tcpudp stream引用配置
    include /etc/nginx/conf.d/stream/*.stream;
}
